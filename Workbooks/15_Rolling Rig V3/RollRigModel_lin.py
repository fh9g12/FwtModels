from sympy import *
import moyra as ma

def get_M(p):
	e = ImmutableDenseMatrix([[2*p.I_xxf + p.I_xxw + 2*p.l_f**2*p.m_f - 2*p.l_f*p.m_f*p.s*p.sigma + 2*p.l_f*p.m_f*p.s + p.m_f*p.s**2*p.sigma**2/2 - p.m_f*p.s**2*p.sigma + p.m_f*p.s**2/2 + p.m_w*p.y_w**2 + p.m_w*p.z_w**2, -p.I_xxf - p.l_f**2*p.m_f + p.l_f*p.m_f*p.s*p.sigma/2 - p.l_f*p.m_f*p.s/2, p.I_xxf + p.l_f**2*p.m_f - p.l_f*p.m_f*p.s*p.sigma/2 + p.l_f*p.m_f*p.s/2], [-p.I_xxf - p.l_f**2*p.m_f + p.l_f*p.m_f*p.s*p.sigma/2 - p.l_f*p.m_f*p.s/2, p.I_xxf + p.l_f**2*p.m_f, 0], [p.I_xxf + p.l_f**2*p.m_f - p.l_f*p.m_f*p.s*p.sigma/2 + p.l_f*p.m_f*p.s/2, 0, p.I_xxf + p.l_f**2*p.m_f]])
	return e
def get_f(p):
	e = ImmutableDenseMatrix([[0], [0], [0]])
	return e
def get_T(p):
	e = 0
	return e
def get_U(p):
	e = 0
	return e
def get_Q(p):
	t = Symbol('t')
	e = MutableDenseMatrix([[-133*p.a[0]*p.V*p.c*p.rho*p.s**3*(1 - p.sigma)**3*p.qd[0]/3200 + (p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-19*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(19*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-17*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(17*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-3*p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*(3*p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-13*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(13*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-11*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(11*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-9*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(9*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-7*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(7*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*(p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-3*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(3*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20 + p.a[0]*p.V*p.c*p.rho*p.s*p.sigma*(-p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*(p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)/20)*p.qd[0] + (19*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-19*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + 17*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-17*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-3*p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/320 + 13*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-13*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + 11*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-11*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + 9*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-9*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + 7*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-7*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/320 + 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-3*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 + p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600)*p.qd[2] + (p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(3*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/320 + 7*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(7*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 9*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(9*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 11*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(11*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 13*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(13*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(3*p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/320 + 17*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(17*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 + 19*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(19*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600)*p.qd[1] + (p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-19*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-17*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-3*p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-13*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-11*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-9*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-7*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-3*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(-p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*sin(p.Lambda)/40)*p.q[2] + (p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(3*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(7*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(9*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(11*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(13*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(3*p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(17*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40 + p.a[0]*p.V**2*p.c*p.rho*p.s*p.sigma*(19*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*sin(p.Lambda)/40)*p.q[1]], [-p.a[0]*p.V**2*p.c*p.rho*p.s**2*p.sigma**2*p.q[1]*sin(p.Lambda)*cos(p.Lambda)/16 - 133*p.a[0]*p.V*p.c*p.rho*p.s**3*p.sigma**3*cos(p.Lambda)**2*p.qd[1]/6400 + (-19*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-19*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - 17*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-17*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-3*p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/320 - 13*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-13*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - 11*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-11*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - 9*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-9*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - 7*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-7*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-p.s*p.sigma*cos(p.Lambda)/8 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/320 - 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-3*p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600 - p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(-p.s*p.sigma*cos(p.Lambda)/40 + p.s*p.sigma/2 - p.s/2)*cos(p.Lambda)/1600)*p.qd[0]], [-p.a[0]*p.V**2*p.c*p.rho*p.s**2*p.sigma**2*p.q[2]*sin(p.Lambda)*cos(p.Lambda)/16 - 133*p.a[0]*p.V*p.c*p.rho*p.s**3*p.sigma**3*cos(p.Lambda)**2*p.qd[2]/6400 + (-p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(3*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/320 - 7*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(7*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 9*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(9*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 11*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(11*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 13*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(13*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 3*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(3*p.s*p.sigma*cos(p.Lambda)/8 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/320 - 17*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(17*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600 - 19*p.a[0]*p.V*p.c*p.rho*p.s**2*p.sigma**2*(19*p.s*p.sigma*cos(p.Lambda)/40 - p.s*p.sigma/2 + p.s/2)*cos(p.Lambda)/1600)*p.qd[0]]])
	return e
def get_p():
	p = ma.DynamicModelParameters(3)
	p.c = ma.ModelSymbol(value=0.15, string='c')
	p.s = ma.ModelSymbol(value=1, string='s')
	p.sigma = ma.ModelSymbol(value=0.28, string='sigma')
	p.m_w = ma.ModelSymbol(value=0.22, string='m_w')
	p.m_f = ma.ModelSymbol(value=0.038, string='m_f')
	p.I_xxf = ma.ModelSymbol(value=0.1, string='I_xxf')
	p.I_xxw = ma.ModelSymbol(value=0.1, string='I_xxw')
	p.rho = ma.ModelSymbol(value=1.225, string='rho')
	p.V = ma.ModelSymbol(value=10, string='V')
	p.g = ma.ModelSymbol(value=9.81, string='g')
	p.alpha_r = ma.ModelSymbol(value=0.05235987755982989, string='alpha_r')
	p.alpha_c = ma.ModelSymbol(value=0, string='alpha_c')
	p.alpha_0 = ma.ModelSymbol(value=0, string='alpha_0')
	p.alphadot_0 = ma.ModelSymbol(value=0, string='alphadot_0')
	p.alpha_1 = ma.ModelSymbol(value=0, string='alpha_1')
	p.alphadot_1 = ma.ModelSymbol(value=0, string='alphadot_1')
	p.alpha_2 = ma.ModelSymbol(value=0, string='alpha_2')
	p.alphadot_2 = ma.ModelSymbol(value=0, string='alphadot_2')
	p.c_d_max = ma.ModelSymbol(value=1, string='C_Dmax')
	p.a_0 = ma.ModelSymbol(value=6.283185307179586, string='a_0')
	p.a_1 = ma.ModelSymbol(value=6.283185307179586, string='a_1')
	p.beta = ma.ModelSymbol(value=6.283185307179586, string='beta')
	p.Lambda = ma.ModelSymbol(value=0.17453292519943295, string='Lambda')
	p.y_f = Symbol('y_f')
	p.y_i = Symbol('y_i')
	p.w_g = ma.ModelSymbol(value=0, string='w_g')
	p.p = ma.ModelSymbol(value=1, string='p')
	p.T = ma.ModelSymbol(value=1, string='T')
	p.a = ma.ModelMatrix(value=[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586], string='a', length=40)
	p.y_w = ma.ModelSymbol(value=0, string='y_w')
	p.z_w = ma.ModelSymbol(value=0, string='z_w')
	p.l_f = ma.ModelSymbol(value=0, string='l_f')
	p.y_n = ma.ModelSymbol(value=0, string='y_n')
	p.y_0 = Symbol('y_0')
	p.x_0 = Symbol('x_0')
	p.fp = ma.ModelMatrix(value=[0, 0, 0, 0, 0, 0], string='qtilde', length=6)
	return p
