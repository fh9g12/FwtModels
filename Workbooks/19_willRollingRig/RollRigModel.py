from sympy import *
def get_M():
	I_xxf = Symbol('I_xxf')
	I_xxw = Symbol('I_xxw')
	l_f = Symbol('l_f')
	m_f = Symbol('m_f')
	s = Symbol('s')
	sigma = Symbol('sigma')
	t = Symbol('t')
	m_w = Symbol('m_w')
	y_w = Symbol('y_w')
	z_w = Symbol('z_w')
	q1 = Function('q1')
	q2 = Function('q2')
	e = MutableDenseMatrix([[2*I_xxf + I_xxw + 2*l_f**2*m_f - l_f*m_f*s*sigma*cos(q1(t)) - l_f*m_f*s*sigma*cos(q2(t)) + l_f*m_f*s*cos(q1(t)) + l_f*m_f*s*cos(q2(t)) + m_f*s**2*sigma**2/2 - m_f*s**2*sigma + m_f*s**2/2 + m_w*y_w**2 + m_w*z_w**2, -I_xxf - l_f**2*m_f + l_f*m_f*s*sigma*cos(q1(t))/2 - l_f*m_f*s*cos(q1(t))/2, I_xxf + l_f**2*m_f - l_f*m_f*s*sigma*cos(q2(t))/2 + l_f*m_f*s*cos(q2(t))/2], [-I_xxf - l_f**2*m_f + l_f*m_f*s*sigma*cos(q1(t))/2 - l_f*m_f*s*cos(q1(t))/2, I_xxf + l_f**2*m_f, 0], [I_xxf + l_f**2*m_f - l_f*m_f*s*sigma*cos(q2(t))/2 + l_f*m_f*s*cos(q2(t))/2, 0, I_xxf + l_f**2*m_f]])
	return e
def get_f():
	g = Symbol('g')
	m_f = Symbol('m_f')
	l_f = Symbol('l_f')
	t = Symbol('t')
	s = Symbol('s')
	sigma = Symbol('sigma')
	m_w = Symbol('m_w')
	y_w = Symbol('y_w')
	z_w = Symbol('z_w')
	q0 = Function('q0')
	q1 = Function('q1')
	q2 = Function('q2')
	e = ImmutableDenseMatrix([[-g*m_f*(-l_f*(-sin(q0(t))*sin(q1(t)) - cos(q0(t))*cos(q1(t))) - s*(sigma/2 + Rational(-1, 2))*cos(q0(t))) - g*m_f*(-l_f*(-sin(q0(t))*sin(q2(t)) + cos(q0(t))*cos(q2(t))) - s*(Rational(1, 2) - sigma/2)*cos(q0(t))) - g*m_w*(y_w*cos(q0(t)) - z_w*sin(q0(t))) + l_f*m_f*s*sigma*sin(q1(t))*Derivative(q0(t), t)*Derivative(q1(t), t) - l_f*m_f*s*sigma*sin(q1(t))*Derivative(q1(t), t)**2/2 + l_f*m_f*s*sigma*sin(q2(t))*Derivative(q0(t), t)*Derivative(q2(t), t) + l_f*m_f*s*sigma*sin(q2(t))*Derivative(q2(t), t)**2/2 - l_f*m_f*s*sin(q1(t))*Derivative(q0(t), t)*Derivative(q1(t), t) + l_f*m_f*s*sin(q1(t))*Derivative(q1(t), t)**2/2 - l_f*m_f*s*sin(q2(t))*Derivative(q0(t), t)*Derivative(q2(t), t) - l_f*m_f*s*sin(q2(t))*Derivative(q2(t), t)**2/2], [g*l_f*m_f*(sin(q0(t))*sin(q1(t)) + cos(q0(t))*cos(q1(t))) - l_f*m_f*s*sigma*sin(q1(t))*Derivative(q0(t), t)**2/2 + l_f*m_f*s*sin(q1(t))*Derivative(q0(t), t)**2/2], [g*l_f*m_f*(-sin(q0(t))*sin(q2(t)) + cos(q0(t))*cos(q2(t))) - l_f*m_f*s*sigma*sin(q2(t))*Derivative(q0(t), t)**2/2 + l_f*m_f*s*sin(q2(t))*Derivative(q0(t), t)**2/2]])
	return e
def get_T():
	I_xxf = Symbol('I_xxf')
	t = Symbol('t')
	I_xxw = Symbol('I_xxw')
	l_f = Symbol('l_f')
	m_f = Symbol('m_f')
	s = Symbol('s')
	sigma = Symbol('sigma')
	m_w = Symbol('m_w')
	y_w = Symbol('y_w')
	z_w = Symbol('z_w')
	q0 = Function('q0')
	q1 = Function('q1')
	q2 = Function('q2')
	e = I_xxf*Derivative(q0(t), t)**2 - I_xxf*Derivative(q0(t), t)*Derivative(q1(t), t) + I_xxf*Derivative(q0(t), t)*Derivative(q2(t), t) + I_xxf*Derivative(q1(t), t)**2/2 + I_xxf*Derivative(q2(t), t)**2/2 + I_xxw*Derivative(q0(t), t)**2/2 + l_f**2*m_f*Derivative(q0(t), t)**2 - l_f**2*m_f*Derivative(q0(t), t)*Derivative(q1(t), t) + l_f**2*m_f*Derivative(q0(t), t)*Derivative(q2(t), t) + l_f**2*m_f*Derivative(q1(t), t)**2/2 + l_f**2*m_f*Derivative(q2(t), t)**2/2 - l_f*m_f*s*sigma*cos(q1(t))*Derivative(q0(t), t)**2/2 + l_f*m_f*s*sigma*cos(q1(t))*Derivative(q0(t), t)*Derivative(q1(t), t)/2 - l_f*m_f*s*sigma*cos(q2(t))*Derivative(q0(t), t)**2/2 - l_f*m_f*s*sigma*cos(q2(t))*Derivative(q0(t), t)*Derivative(q2(t), t)/2 + l_f*m_f*s*cos(q1(t))*Derivative(q0(t), t)**2/2 - l_f*m_f*s*cos(q1(t))*Derivative(q0(t), t)*Derivative(q1(t), t)/2 + l_f*m_f*s*cos(q2(t))*Derivative(q0(t), t)**2/2 + l_f*m_f*s*cos(q2(t))*Derivative(q0(t), t)*Derivative(q2(t), t)/2 + m_f*s**2*sigma**2*Derivative(q0(t), t)**2/4 - m_f*s**2*sigma*Derivative(q0(t), t)**2/2 + m_f*s**2*Derivative(q0(t), t)**2/4 + m_w*y_w**2*Derivative(q0(t), t)**2/2 + m_w*z_w**2*Derivative(q0(t), t)**2/2
	return e
def get_U():
	g = Symbol('g')
	m_f = Symbol('m_f')
	l_f = Symbol('l_f')
	t = Symbol('t')
	s = Symbol('s')
	sigma = Symbol('sigma')
	m_w = Symbol('m_w')
	y_w = Symbol('y_w')
	z_w = Symbol('z_w')
	q0 = Function('q0')
	q1 = Function('q1')
	q2 = Function('q2')
	e = g*m_f*(l_f*(-sin(q0(t))*cos(q1(t)) + sin(q1(t))*cos(q0(t))) - s*(1 - sigma)*sin(q0(t))/2) + g*m_f*(-l_f*(-sin(q0(t))*cos(q2(t)) - sin(q2(t))*cos(q0(t))) + s*(1 - sigma)*sin(q0(t))/2) + g*m_w*(-y_w*sin(q0(t)) - z_w*cos(q0(t)))
	return e
def get_Q():
	V = Symbol('V')
	c = Symbol('c')
	rho = Symbol('rho')
	s = Symbol('s')
	sigma = Symbol('sigma')
	a0 = Symbol('a0')
	alpha_2 = Symbol('alpha_2')
	alpha_c = Symbol('alpha_c')
	t = Symbol('t')
	a3 = Symbol('a3')
	alpha_1 = Symbol('alpha_1')
	a1 = Symbol('a1')
	a2 = Symbol('a2')
	q2 = Function('q2')
	q0 = Function('q0')
	q1 = Function('q1')
	e = MutableDenseMatrix([[-V**2*c*rho*s*sigma*a0*(alpha_2 + alpha_c + (-s*sigma*Derivative(q2(t), t)/4 + (s*sigma*cos(q2(t))/2 - s*sigma/4 - s*cos(q2(t))/2)*Derivative(q0(t), t))/V)*(s*sigma*cos(q2(t))/2 - s*sigma/4 - s*cos(q2(t))/2)/4 - V**2*c*rho*s*sigma*a3*(alpha_1 + alpha_c + (-s*sigma*Derivative(q1(t), t)/4 + (-s*sigma*cos(q1(t))/2 + s*sigma/4 + s*cos(q1(t))/2)*Derivative(q0(t), t))/V)*(-s*sigma*cos(q1(t))/2 + s*sigma/4 + s*cos(q1(t))/2)/4 - V*c*rho*s**3*a1*(1 - sigma)**3*Derivative(q0(t), t)/64 - V*c*rho*s**3*a2*(1 - sigma)**3*Derivative(q0(t), t)/64], [V**2*c*rho*s**2*sigma**2*a3*(alpha_1 + alpha_c + (-s*sigma*Derivative(q1(t), t)/4 + (-s*sigma*cos(q1(t))/2 + s*sigma/4 + s*cos(q1(t))/2)*Derivative(q0(t), t))/V)/16], [V**2*c*rho*s**2*sigma**2*a0*(alpha_2 + alpha_c + (-s*sigma*Derivative(q2(t), t)/4 + (s*sigma*cos(q2(t))/2 - s*sigma/4 - s*cos(q2(t))/2)*Derivative(q0(t), t))/V)/16]])
	return e
