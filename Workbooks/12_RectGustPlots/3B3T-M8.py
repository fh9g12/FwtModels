from sympy import *
def get_M():
	c = Symbol('c')
	delta_m = Symbol('delta_m')
	rho_t = Symbol('rho_t')
	s_t = Symbol('s_t')
	sigma = Symbol('sigma')
	eta0 = Symbol('eta0')
	eta1 = Symbol('eta1')
	eta2 = Symbol('eta2')
	e_0 = Symbol('e_0')
	eta3 = Symbol('eta3')
	eta4 = Symbol('eta4')
	eta5 = Symbol('eta5')
	e = ImmutableDenseMatrix([[c*delta_m*rho_t*s_t**5*sigma**5*eta0**2 - 4*c*delta_m*rho_t*s_t**5*sigma**4*eta0**2 + 6*c*delta_m*rho_t*s_t**5*sigma**3*eta0**2 - 4*c*delta_m*rho_t*s_t**5*sigma**2*eta0**2 + c*delta_m*rho_t*s_t**5*sigma*eta0**2 - c*rho_t*s_t**5*sigma**5*eta0**2/5 + c*rho_t*s_t**5*sigma**4*eta0**2 - 2*c*rho_t*s_t**5*sigma**3*eta0**2 + 2*c*rho_t*s_t**5*sigma**2*eta0**2 - c*rho_t*s_t**5*sigma*eta0**2 + c*rho_t*s_t**5*eta0**2/5, -c*delta_m*rho_t*s_t**6*sigma**6*eta0*eta1 + 5*c*delta_m*rho_t*s_t**6*sigma**5*eta0*eta1 - 10*c*delta_m*rho_t*s_t**6*sigma**4*eta0*eta1 + 10*c*delta_m*rho_t*s_t**6*sigma**3*eta0*eta1 - 5*c*delta_m*rho_t*s_t**6*sigma**2*eta0*eta1 + c*delta_m*rho_t*s_t**6*sigma*eta0*eta1 + c*rho_t*s_t**6*sigma**6*eta0*eta1/6 - c*rho_t*s_t**6*sigma**5*eta0*eta1 + 5*c*rho_t*s_t**6*sigma**4*eta0*eta1/2 - 10*c*rho_t*s_t**6*sigma**3*eta0*eta1/3 + 5*c*rho_t*s_t**6*sigma**2*eta0*eta1/2 - c*rho_t*s_t**6*sigma*eta0*eta1 + c*rho_t*s_t**6*eta0*eta1/6, c*delta_m*rho_t*s_t**7*sigma**7*eta0*eta2 - 6*c*delta_m*rho_t*s_t**7*sigma**6*eta0*eta2 + 15*c*delta_m*rho_t*s_t**7*sigma**5*eta0*eta2 - 20*c*delta_m*rho_t*s_t**7*sigma**4*eta0*eta2 + 15*c*delta_m*rho_t*s_t**7*sigma**3*eta0*eta2 - 6*c*delta_m*rho_t*s_t**7*sigma**2*eta0*eta2 + c*delta_m*rho_t*s_t**7*sigma*eta0*eta2 - c*rho_t*s_t**7*sigma**7*eta0*eta2/7 + c*rho_t*s_t**7*sigma**6*eta0*eta2 - 3*c*rho_t*s_t**7*sigma**5*eta0*eta2 + 5*c*rho_t*s_t**7*sigma**4*eta0*eta2 - 5*c*rho_t*s_t**7*sigma**3*eta0*eta2 + 3*c*rho_t*s_t**7*sigma**2*eta0*eta2 - c*rho_t*s_t**7*sigma*eta0*eta2 + c*rho_t*s_t**7*eta0*eta2/7, c**2*e_0*rho_t*s_t**4*sigma**4*eta0*eta3/4 - c**2*e_0*rho_t*s_t**4*sigma**3*eta0*eta3 + 3*c**2*e_0*rho_t*s_t**4*sigma**2*eta0*eta3/2 - c**2*e_0*rho_t*s_t**4*sigma*eta0*eta3 + c**2*e_0*rho_t*s_t**4*eta0*eta3/4 - c**2*rho_t*s_t**4*sigma**4*eta0*eta3/16 + c**2*rho_t*s_t**4*sigma**3*eta0*eta3/4 - 3*c**2*rho_t*s_t**4*sigma**2*eta0*eta3/8 + c**2*rho_t*s_t**4*sigma*eta0*eta3/4 - c**2*rho_t*s_t**4*eta0*eta3/16, -c**2*e_0*rho_t*s_t**5*sigma**5*eta0*eta4/5 + c**2*e_0*rho_t*s_t**5*sigma**4*eta0*eta4 - 2*c**2*e_0*rho_t*s_t**5*sigma**3*eta0*eta4 + 2*c**2*e_0*rho_t*s_t**5*sigma**2*eta0*eta4 - c**2*e_0*rho_t*s_t**5*sigma*eta0*eta4 + c**2*e_0*rho_t*s_t**5*eta0*eta4/5 + c**2*rho_t*s_t**5*sigma**5*eta0*eta4/20 - c**2*rho_t*s_t**5*sigma**4*eta0*eta4/4 + c**2*rho_t*s_t**5*sigma**3*eta0*eta4/2 - c**2*rho_t*s_t**5*sigma**2*eta0*eta4/2 + c**2*rho_t*s_t**5*sigma*eta0*eta4/4 - c**2*rho_t*s_t**5*eta0*eta4/20, c**2*e_0*rho_t*s_t**6*sigma**6*eta0*eta5/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta0*eta5 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta0*eta5/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta0*eta5/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta0*eta5/2 - c**2*e_0*rho_t*s_t**6*sigma*eta0*eta5 + c**2*e_0*rho_t*s_t**6*eta0*eta5/6 - c**2*rho_t*s_t**6*sigma**6*eta0*eta5/24 + c**2*rho_t*s_t**6*sigma**5*eta0*eta5/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta0*eta5/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta0*eta5/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta0*eta5/8 + c**2*rho_t*s_t**6*sigma*eta0*eta5/4 - c**2*rho_t*s_t**6*eta0*eta5/24, -c*delta_m*rho_t*s_t**4*sigma**4*eta0/2 + c*delta_m*rho_t*s_t**4*sigma**3*eta0 - c*delta_m*rho_t*s_t**4*sigma**2*eta0/2], [-c*delta_m*rho_t*s_t**6*sigma**6*eta0*eta1 + 5*c*delta_m*rho_t*s_t**6*sigma**5*eta0*eta1 - 10*c*delta_m*rho_t*s_t**6*sigma**4*eta0*eta1 + 10*c*delta_m*rho_t*s_t**6*sigma**3*eta0*eta1 - 5*c*delta_m*rho_t*s_t**6*sigma**2*eta0*eta1 + c*delta_m*rho_t*s_t**6*sigma*eta0*eta1 + c*rho_t*s_t**6*sigma**6*eta0*eta1/6 - c*rho_t*s_t**6*sigma**5*eta0*eta1 + 5*c*rho_t*s_t**6*sigma**4*eta0*eta1/2 - 10*c*rho_t*s_t**6*sigma**3*eta0*eta1/3 + 5*c*rho_t*s_t**6*sigma**2*eta0*eta1/2 - c*rho_t*s_t**6*sigma*eta0*eta1 + c*rho_t*s_t**6*eta0*eta1/6, c*delta_m*rho_t*s_t**7*sigma**7*eta1**2 - 6*c*delta_m*rho_t*s_t**7*sigma**6*eta1**2 + 15*c*delta_m*rho_t*s_t**7*sigma**5*eta1**2 - 20*c*delta_m*rho_t*s_t**7*sigma**4*eta1**2 + 15*c*delta_m*rho_t*s_t**7*sigma**3*eta1**2 - 6*c*delta_m*rho_t*s_t**7*sigma**2*eta1**2 + c*delta_m*rho_t*s_t**7*sigma*eta1**2 - c*rho_t*s_t**7*sigma**7*eta1**2/7 + c*rho_t*s_t**7*sigma**6*eta1**2 - 3*c*rho_t*s_t**7*sigma**5*eta1**2 + 5*c*rho_t*s_t**7*sigma**4*eta1**2 - 5*c*rho_t*s_t**7*sigma**3*eta1**2 + 3*c*rho_t*s_t**7*sigma**2*eta1**2 - c*rho_t*s_t**7*sigma*eta1**2 + c*rho_t*s_t**7*eta1**2/7, -c*delta_m*rho_t*s_t**8*sigma**8*eta1*eta2 + 7*c*delta_m*rho_t*s_t**8*sigma**7*eta1*eta2 - 21*c*delta_m*rho_t*s_t**8*sigma**6*eta1*eta2 + 35*c*delta_m*rho_t*s_t**8*sigma**5*eta1*eta2 - 35*c*delta_m*rho_t*s_t**8*sigma**4*eta1*eta2 + 21*c*delta_m*rho_t*s_t**8*sigma**3*eta1*eta2 - 7*c*delta_m*rho_t*s_t**8*sigma**2*eta1*eta2 + c*delta_m*rho_t*s_t**8*sigma*eta1*eta2 + c*rho_t*s_t**8*sigma**8*eta1*eta2/8 - c*rho_t*s_t**8*sigma**7*eta1*eta2 + 7*c*rho_t*s_t**8*sigma**6*eta1*eta2/2 - 7*c*rho_t*s_t**8*sigma**5*eta1*eta2 + 35*c*rho_t*s_t**8*sigma**4*eta1*eta2/4 - 7*c*rho_t*s_t**8*sigma**3*eta1*eta2 + 7*c*rho_t*s_t**8*sigma**2*eta1*eta2/2 - c*rho_t*s_t**8*sigma*eta1*eta2 + c*rho_t*s_t**8*eta1*eta2/8, -c**2*e_0*rho_t*s_t**5*sigma**5*eta1*eta3/5 + c**2*e_0*rho_t*s_t**5*sigma**4*eta1*eta3 - 2*c**2*e_0*rho_t*s_t**5*sigma**3*eta1*eta3 + 2*c**2*e_0*rho_t*s_t**5*sigma**2*eta1*eta3 - c**2*e_0*rho_t*s_t**5*sigma*eta1*eta3 + c**2*e_0*rho_t*s_t**5*eta1*eta3/5 + c**2*rho_t*s_t**5*sigma**5*eta1*eta3/20 - c**2*rho_t*s_t**5*sigma**4*eta1*eta3/4 + c**2*rho_t*s_t**5*sigma**3*eta1*eta3/2 - c**2*rho_t*s_t**5*sigma**2*eta1*eta3/2 + c**2*rho_t*s_t**5*sigma*eta1*eta3/4 - c**2*rho_t*s_t**5*eta1*eta3/20, c**2*e_0*rho_t*s_t**6*sigma**6*eta1*eta4/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta1*eta4 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta1*eta4/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta1*eta4/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta1*eta4/2 - c**2*e_0*rho_t*s_t**6*sigma*eta1*eta4 + c**2*e_0*rho_t*s_t**6*eta1*eta4/6 - c**2*rho_t*s_t**6*sigma**6*eta1*eta4/24 + c**2*rho_t*s_t**6*sigma**5*eta1*eta4/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta1*eta4/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta1*eta4/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta1*eta4/8 + c**2*rho_t*s_t**6*sigma*eta1*eta4/4 - c**2*rho_t*s_t**6*eta1*eta4/24, -c**2*e_0*rho_t*s_t**7*sigma**7*eta1*eta5/7 + c**2*e_0*rho_t*s_t**7*sigma**6*eta1*eta5 - 3*c**2*e_0*rho_t*s_t**7*sigma**5*eta1*eta5 + 5*c**2*e_0*rho_t*s_t**7*sigma**4*eta1*eta5 - 5*c**2*e_0*rho_t*s_t**7*sigma**3*eta1*eta5 + 3*c**2*e_0*rho_t*s_t**7*sigma**2*eta1*eta5 - c**2*e_0*rho_t*s_t**7*sigma*eta1*eta5 + c**2*e_0*rho_t*s_t**7*eta1*eta5/7 + c**2*rho_t*s_t**7*sigma**7*eta1*eta5/28 - c**2*rho_t*s_t**7*sigma**6*eta1*eta5/4 + 3*c**2*rho_t*s_t**7*sigma**5*eta1*eta5/4 - 5*c**2*rho_t*s_t**7*sigma**4*eta1*eta5/4 + 5*c**2*rho_t*s_t**7*sigma**3*eta1*eta5/4 - 3*c**2*rho_t*s_t**7*sigma**2*eta1*eta5/4 + c**2*rho_t*s_t**7*sigma*eta1*eta5/4 - c**2*rho_t*s_t**7*eta1*eta5/28, c*delta_m*rho_t*s_t**5*sigma**5*eta1/2 - 3*c*delta_m*rho_t*s_t**5*sigma**4*eta1/2 + 3*c*delta_m*rho_t*s_t**5*sigma**3*eta1/2 - c*delta_m*rho_t*s_t**5*sigma**2*eta1/2], [c*delta_m*rho_t*s_t**7*sigma**7*eta0*eta2 - 6*c*delta_m*rho_t*s_t**7*sigma**6*eta0*eta2 + 15*c*delta_m*rho_t*s_t**7*sigma**5*eta0*eta2 - 20*c*delta_m*rho_t*s_t**7*sigma**4*eta0*eta2 + 15*c*delta_m*rho_t*s_t**7*sigma**3*eta0*eta2 - 6*c*delta_m*rho_t*s_t**7*sigma**2*eta0*eta2 + c*delta_m*rho_t*s_t**7*sigma*eta0*eta2 - c*rho_t*s_t**7*sigma**7*eta0*eta2/7 + c*rho_t*s_t**7*sigma**6*eta0*eta2 - 3*c*rho_t*s_t**7*sigma**5*eta0*eta2 + 5*c*rho_t*s_t**7*sigma**4*eta0*eta2 - 5*c*rho_t*s_t**7*sigma**3*eta0*eta2 + 3*c*rho_t*s_t**7*sigma**2*eta0*eta2 - c*rho_t*s_t**7*sigma*eta0*eta2 + c*rho_t*s_t**7*eta0*eta2/7, -c*delta_m*rho_t*s_t**8*sigma**8*eta1*eta2 + 7*c*delta_m*rho_t*s_t**8*sigma**7*eta1*eta2 - 21*c*delta_m*rho_t*s_t**8*sigma**6*eta1*eta2 + 35*c*delta_m*rho_t*s_t**8*sigma**5*eta1*eta2 - 35*c*delta_m*rho_t*s_t**8*sigma**4*eta1*eta2 + 21*c*delta_m*rho_t*s_t**8*sigma**3*eta1*eta2 - 7*c*delta_m*rho_t*s_t**8*sigma**2*eta1*eta2 + c*delta_m*rho_t*s_t**8*sigma*eta1*eta2 + c*rho_t*s_t**8*sigma**8*eta1*eta2/8 - c*rho_t*s_t**8*sigma**7*eta1*eta2 + 7*c*rho_t*s_t**8*sigma**6*eta1*eta2/2 - 7*c*rho_t*s_t**8*sigma**5*eta1*eta2 + 35*c*rho_t*s_t**8*sigma**4*eta1*eta2/4 - 7*c*rho_t*s_t**8*sigma**3*eta1*eta2 + 7*c*rho_t*s_t**8*sigma**2*eta1*eta2/2 - c*rho_t*s_t**8*sigma*eta1*eta2 + c*rho_t*s_t**8*eta1*eta2/8, c*delta_m*rho_t*s_t**9*sigma**9*eta2**2 - 8*c*delta_m*rho_t*s_t**9*sigma**8*eta2**2 + 28*c*delta_m*rho_t*s_t**9*sigma**7*eta2**2 - 56*c*delta_m*rho_t*s_t**9*sigma**6*eta2**2 + 70*c*delta_m*rho_t*s_t**9*sigma**5*eta2**2 - 56*c*delta_m*rho_t*s_t**9*sigma**4*eta2**2 + 28*c*delta_m*rho_t*s_t**9*sigma**3*eta2**2 - 8*c*delta_m*rho_t*s_t**9*sigma**2*eta2**2 + c*delta_m*rho_t*s_t**9*sigma*eta2**2 - c*rho_t*s_t**9*sigma**9*eta2**2/9 + c*rho_t*s_t**9*sigma**8*eta2**2 - 4*c*rho_t*s_t**9*sigma**7*eta2**2 + 28*c*rho_t*s_t**9*sigma**6*eta2**2/3 - 14*c*rho_t*s_t**9*sigma**5*eta2**2 + 14*c*rho_t*s_t**9*sigma**4*eta2**2 - 28*c*rho_t*s_t**9*sigma**3*eta2**2/3 + 4*c*rho_t*s_t**9*sigma**2*eta2**2 - c*rho_t*s_t**9*sigma*eta2**2 + c*rho_t*s_t**9*eta2**2/9, c**2*e_0*rho_t*s_t**6*sigma**6*eta2*eta3/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta2*eta3 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta2*eta3/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta2*eta3/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta2*eta3/2 - c**2*e_0*rho_t*s_t**6*sigma*eta2*eta3 + c**2*e_0*rho_t*s_t**6*eta2*eta3/6 - c**2*rho_t*s_t**6*sigma**6*eta2*eta3/24 + c**2*rho_t*s_t**6*sigma**5*eta2*eta3/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta2*eta3/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta2*eta3/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta2*eta3/8 + c**2*rho_t*s_t**6*sigma*eta2*eta3/4 - c**2*rho_t*s_t**6*eta2*eta3/24, -c**2*e_0*rho_t*s_t**7*sigma**7*eta2*eta4/7 + c**2*e_0*rho_t*s_t**7*sigma**6*eta2*eta4 - 3*c**2*e_0*rho_t*s_t**7*sigma**5*eta2*eta4 + 5*c**2*e_0*rho_t*s_t**7*sigma**4*eta2*eta4 - 5*c**2*e_0*rho_t*s_t**7*sigma**3*eta2*eta4 + 3*c**2*e_0*rho_t*s_t**7*sigma**2*eta2*eta4 - c**2*e_0*rho_t*s_t**7*sigma*eta2*eta4 + c**2*e_0*rho_t*s_t**7*eta2*eta4/7 + c**2*rho_t*s_t**7*sigma**7*eta2*eta4/28 - c**2*rho_t*s_t**7*sigma**6*eta2*eta4/4 + 3*c**2*rho_t*s_t**7*sigma**5*eta2*eta4/4 - 5*c**2*rho_t*s_t**7*sigma**4*eta2*eta4/4 + 5*c**2*rho_t*s_t**7*sigma**3*eta2*eta4/4 - 3*c**2*rho_t*s_t**7*sigma**2*eta2*eta4/4 + c**2*rho_t*s_t**7*sigma*eta2*eta4/4 - c**2*rho_t*s_t**7*eta2*eta4/28, c**2*e_0*rho_t*s_t**8*sigma**8*eta2*eta5/8 - c**2*e_0*rho_t*s_t**8*sigma**7*eta2*eta5 + 7*c**2*e_0*rho_t*s_t**8*sigma**6*eta2*eta5/2 - 7*c**2*e_0*rho_t*s_t**8*sigma**5*eta2*eta5 + 35*c**2*e_0*rho_t*s_t**8*sigma**4*eta2*eta5/4 - 7*c**2*e_0*rho_t*s_t**8*sigma**3*eta2*eta5 + 7*c**2*e_0*rho_t*s_t**8*sigma**2*eta2*eta5/2 - c**2*e_0*rho_t*s_t**8*sigma*eta2*eta5 + c**2*e_0*rho_t*s_t**8*eta2*eta5/8 - c**2*rho_t*s_t**8*sigma**8*eta2*eta5/32 + c**2*rho_t*s_t**8*sigma**7*eta2*eta5/4 - 7*c**2*rho_t*s_t**8*sigma**6*eta2*eta5/8 + 7*c**2*rho_t*s_t**8*sigma**5*eta2*eta5/4 - 35*c**2*rho_t*s_t**8*sigma**4*eta2*eta5/16 + 7*c**2*rho_t*s_t**8*sigma**3*eta2*eta5/4 - 7*c**2*rho_t*s_t**8*sigma**2*eta2*eta5/8 + c**2*rho_t*s_t**8*sigma*eta2*eta5/4 - c**2*rho_t*s_t**8*eta2*eta5/32, -c*delta_m*rho_t*s_t**6*sigma**6*eta2/2 + 2*c*delta_m*rho_t*s_t**6*sigma**5*eta2 - 3*c*delta_m*rho_t*s_t**6*sigma**4*eta2 + 2*c*delta_m*rho_t*s_t**6*sigma**3*eta2 - c*delta_m*rho_t*s_t**6*sigma**2*eta2/2], [c**2*e_0*rho_t*s_t**4*sigma**4*eta0*eta3/4 - c**2*e_0*rho_t*s_t**4*sigma**3*eta0*eta3 + 3*c**2*e_0*rho_t*s_t**4*sigma**2*eta0*eta3/2 - c**2*e_0*rho_t*s_t**4*sigma*eta0*eta3 + c**2*e_0*rho_t*s_t**4*eta0*eta3/4 - c**2*rho_t*s_t**4*sigma**4*eta0*eta3/16 + c**2*rho_t*s_t**4*sigma**3*eta0*eta3/4 - 3*c**2*rho_t*s_t**4*sigma**2*eta0*eta3/8 + c**2*rho_t*s_t**4*sigma*eta0*eta3/4 - c**2*rho_t*s_t**4*eta0*eta3/16, -c**2*e_0*rho_t*s_t**5*sigma**5*eta1*eta3/5 + c**2*e_0*rho_t*s_t**5*sigma**4*eta1*eta3 - 2*c**2*e_0*rho_t*s_t**5*sigma**3*eta1*eta3 + 2*c**2*e_0*rho_t*s_t**5*sigma**2*eta1*eta3 - c**2*e_0*rho_t*s_t**5*sigma*eta1*eta3 + c**2*e_0*rho_t*s_t**5*eta1*eta3/5 + c**2*rho_t*s_t**5*sigma**5*eta1*eta3/20 - c**2*rho_t*s_t**5*sigma**4*eta1*eta3/4 + c**2*rho_t*s_t**5*sigma**3*eta1*eta3/2 - c**2*rho_t*s_t**5*sigma**2*eta1*eta3/2 + c**2*rho_t*s_t**5*sigma*eta1*eta3/4 - c**2*rho_t*s_t**5*eta1*eta3/20, c**2*e_0*rho_t*s_t**6*sigma**6*eta2*eta3/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta2*eta3 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta2*eta3/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta2*eta3/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta2*eta3/2 - c**2*e_0*rho_t*s_t**6*sigma*eta2*eta3 + c**2*e_0*rho_t*s_t**6*eta2*eta3/6 - c**2*rho_t*s_t**6*sigma**6*eta2*eta3/24 + c**2*rho_t*s_t**6*sigma**5*eta2*eta3/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta2*eta3/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta2*eta3/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta2*eta3/8 + c**2*rho_t*s_t**6*sigma*eta2*eta3/4 - c**2*rho_t*s_t**6*eta2*eta3/24, -c**3*e_0**2*rho_t*s_t**3*sigma**3*eta3**2/3 + c**3*e_0**2*rho_t*s_t**3*sigma**2*eta3**2 - c**3*e_0**2*rho_t*s_t**3*sigma*eta3**2 + c**3*e_0**2*rho_t*s_t**3*eta3**2/3 + c**3*e_0*rho_t*s_t**3*sigma**3*eta3**2/6 - c**3*e_0*rho_t*s_t**3*sigma**2*eta3**2/2 + c**3*e_0*rho_t*s_t**3*sigma*eta3**2/2 - c**3*e_0*rho_t*s_t**3*eta3**2/6 - 7*c**3*rho_t*s_t**3*sigma**3*eta3**2/144 + 7*c**3*rho_t*s_t**3*sigma**2*eta3**2/48 - 7*c**3*rho_t*s_t**3*sigma*eta3**2/48 + 7*c**3*rho_t*s_t**3*eta3**2/144, c**3*e_0**2*rho_t*s_t**4*sigma**4*eta3*eta4/4 - c**3*e_0**2*rho_t*s_t**4*sigma**3*eta3*eta4 + 3*c**3*e_0**2*rho_t*s_t**4*sigma**2*eta3*eta4/2 - c**3*e_0**2*rho_t*s_t**4*sigma*eta3*eta4 + c**3*e_0**2*rho_t*s_t**4*eta3*eta4/4 - c**3*e_0*rho_t*s_t**4*sigma**4*eta3*eta4/8 + c**3*e_0*rho_t*s_t**4*sigma**3*eta3*eta4/2 - 3*c**3*e_0*rho_t*s_t**4*sigma**2*eta3*eta4/4 + c**3*e_0*rho_t*s_t**4*sigma*eta3*eta4/2 - c**3*e_0*rho_t*s_t**4*eta3*eta4/8 + 7*c**3*rho_t*s_t**4*sigma**4*eta3*eta4/192 - 7*c**3*rho_t*s_t**4*sigma**3*eta3*eta4/48 + 7*c**3*rho_t*s_t**4*sigma**2*eta3*eta4/32 - 7*c**3*rho_t*s_t**4*sigma*eta3*eta4/48 + 7*c**3*rho_t*s_t**4*eta3*eta4/192, -c**3*e_0**2*rho_t*s_t**5*sigma**5*eta3*eta5/5 + c**3*e_0**2*rho_t*s_t**5*sigma**4*eta3*eta5 - 2*c**3*e_0**2*rho_t*s_t**5*sigma**3*eta3*eta5 + 2*c**3*e_0**2*rho_t*s_t**5*sigma**2*eta3*eta5 - c**3*e_0**2*rho_t*s_t**5*sigma*eta3*eta5 + c**3*e_0**2*rho_t*s_t**5*eta3*eta5/5 + c**3*e_0*rho_t*s_t**5*sigma**5*eta3*eta5/10 - c**3*e_0*rho_t*s_t**5*sigma**4*eta3*eta5/2 + c**3*e_0*rho_t*s_t**5*sigma**3*eta3*eta5 - c**3*e_0*rho_t*s_t**5*sigma**2*eta3*eta5 + c**3*e_0*rho_t*s_t**5*sigma*eta3*eta5/2 - c**3*e_0*rho_t*s_t**5*eta3*eta5/10 - 7*c**3*rho_t*s_t**5*sigma**5*eta3*eta5/240 + 7*c**3*rho_t*s_t**5*sigma**4*eta3*eta5/48 - 7*c**3*rho_t*s_t**5*sigma**3*eta3*eta5/24 + 7*c**3*rho_t*s_t**5*sigma**2*eta3*eta5/24 - 7*c**3*rho_t*s_t**5*sigma*eta3*eta5/48 + 7*c**3*rho_t*s_t**5*eta3*eta5/240, 0], [-c**2*e_0*rho_t*s_t**5*sigma**5*eta0*eta4/5 + c**2*e_0*rho_t*s_t**5*sigma**4*eta0*eta4 - 2*c**2*e_0*rho_t*s_t**5*sigma**3*eta0*eta4 + 2*c**2*e_0*rho_t*s_t**5*sigma**2*eta0*eta4 - c**2*e_0*rho_t*s_t**5*sigma*eta0*eta4 + c**2*e_0*rho_t*s_t**5*eta0*eta4/5 + c**2*rho_t*s_t**5*sigma**5*eta0*eta4/20 - c**2*rho_t*s_t**5*sigma**4*eta0*eta4/4 + c**2*rho_t*s_t**5*sigma**3*eta0*eta4/2 - c**2*rho_t*s_t**5*sigma**2*eta0*eta4/2 + c**2*rho_t*s_t**5*sigma*eta0*eta4/4 - c**2*rho_t*s_t**5*eta0*eta4/20, c**2*e_0*rho_t*s_t**6*sigma**6*eta1*eta4/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta1*eta4 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta1*eta4/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta1*eta4/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta1*eta4/2 - c**2*e_0*rho_t*s_t**6*sigma*eta1*eta4 + c**2*e_0*rho_t*s_t**6*eta1*eta4/6 - c**2*rho_t*s_t**6*sigma**6*eta1*eta4/24 + c**2*rho_t*s_t**6*sigma**5*eta1*eta4/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta1*eta4/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta1*eta4/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta1*eta4/8 + c**2*rho_t*s_t**6*sigma*eta1*eta4/4 - c**2*rho_t*s_t**6*eta1*eta4/24, -c**2*e_0*rho_t*s_t**7*sigma**7*eta2*eta4/7 + c**2*e_0*rho_t*s_t**7*sigma**6*eta2*eta4 - 3*c**2*e_0*rho_t*s_t**7*sigma**5*eta2*eta4 + 5*c**2*e_0*rho_t*s_t**7*sigma**4*eta2*eta4 - 5*c**2*e_0*rho_t*s_t**7*sigma**3*eta2*eta4 + 3*c**2*e_0*rho_t*s_t**7*sigma**2*eta2*eta4 - c**2*e_0*rho_t*s_t**7*sigma*eta2*eta4 + c**2*e_0*rho_t*s_t**7*eta2*eta4/7 + c**2*rho_t*s_t**7*sigma**7*eta2*eta4/28 - c**2*rho_t*s_t**7*sigma**6*eta2*eta4/4 + 3*c**2*rho_t*s_t**7*sigma**5*eta2*eta4/4 - 5*c**2*rho_t*s_t**7*sigma**4*eta2*eta4/4 + 5*c**2*rho_t*s_t**7*sigma**3*eta2*eta4/4 - 3*c**2*rho_t*s_t**7*sigma**2*eta2*eta4/4 + c**2*rho_t*s_t**7*sigma*eta2*eta4/4 - c**2*rho_t*s_t**7*eta2*eta4/28, c**3*e_0**2*rho_t*s_t**4*sigma**4*eta3*eta4/4 - c**3*e_0**2*rho_t*s_t**4*sigma**3*eta3*eta4 + 3*c**3*e_0**2*rho_t*s_t**4*sigma**2*eta3*eta4/2 - c**3*e_0**2*rho_t*s_t**4*sigma*eta3*eta4 + c**3*e_0**2*rho_t*s_t**4*eta3*eta4/4 - c**3*e_0*rho_t*s_t**4*sigma**4*eta3*eta4/8 + c**3*e_0*rho_t*s_t**4*sigma**3*eta3*eta4/2 - 3*c**3*e_0*rho_t*s_t**4*sigma**2*eta3*eta4/4 + c**3*e_0*rho_t*s_t**4*sigma*eta3*eta4/2 - c**3*e_0*rho_t*s_t**4*eta3*eta4/8 + 7*c**3*rho_t*s_t**4*sigma**4*eta3*eta4/192 - 7*c**3*rho_t*s_t**4*sigma**3*eta3*eta4/48 + 7*c**3*rho_t*s_t**4*sigma**2*eta3*eta4/32 - 7*c**3*rho_t*s_t**4*sigma*eta3*eta4/48 + 7*c**3*rho_t*s_t**4*eta3*eta4/192, -c**3*e_0**2*rho_t*s_t**5*sigma**5*eta4**2/5 + c**3*e_0**2*rho_t*s_t**5*sigma**4*eta4**2 - 2*c**3*e_0**2*rho_t*s_t**5*sigma**3*eta4**2 + 2*c**3*e_0**2*rho_t*s_t**5*sigma**2*eta4**2 - c**3*e_0**2*rho_t*s_t**5*sigma*eta4**2 + c**3*e_0**2*rho_t*s_t**5*eta4**2/5 + c**3*e_0*rho_t*s_t**5*sigma**5*eta4**2/10 - c**3*e_0*rho_t*s_t**5*sigma**4*eta4**2/2 + c**3*e_0*rho_t*s_t**5*sigma**3*eta4**2 - c**3*e_0*rho_t*s_t**5*sigma**2*eta4**2 + c**3*e_0*rho_t*s_t**5*sigma*eta4**2/2 - c**3*e_0*rho_t*s_t**5*eta4**2/10 - 7*c**3*rho_t*s_t**5*sigma**5*eta4**2/240 + 7*c**3*rho_t*s_t**5*sigma**4*eta4**2/48 - 7*c**3*rho_t*s_t**5*sigma**3*eta4**2/24 + 7*c**3*rho_t*s_t**5*sigma**2*eta4**2/24 - 7*c**3*rho_t*s_t**5*sigma*eta4**2/48 + 7*c**3*rho_t*s_t**5*eta4**2/240, c**3*e_0**2*rho_t*s_t**6*sigma**6*eta4*eta5/6 - c**3*e_0**2*rho_t*s_t**6*sigma**5*eta4*eta5 + 5*c**3*e_0**2*rho_t*s_t**6*sigma**4*eta4*eta5/2 - 10*c**3*e_0**2*rho_t*s_t**6*sigma**3*eta4*eta5/3 + 5*c**3*e_0**2*rho_t*s_t**6*sigma**2*eta4*eta5/2 - c**3*e_0**2*rho_t*s_t**6*sigma*eta4*eta5 + c**3*e_0**2*rho_t*s_t**6*eta4*eta5/6 - c**3*e_0*rho_t*s_t**6*sigma**6*eta4*eta5/12 + c**3*e_0*rho_t*s_t**6*sigma**5*eta4*eta5/2 - 5*c**3*e_0*rho_t*s_t**6*sigma**4*eta4*eta5/4 + 5*c**3*e_0*rho_t*s_t**6*sigma**3*eta4*eta5/3 - 5*c**3*e_0*rho_t*s_t**6*sigma**2*eta4*eta5/4 + c**3*e_0*rho_t*s_t**6*sigma*eta4*eta5/2 - c**3*e_0*rho_t*s_t**6*eta4*eta5/12 + 7*c**3*rho_t*s_t**6*sigma**6*eta4*eta5/288 - 7*c**3*rho_t*s_t**6*sigma**5*eta4*eta5/48 + 35*c**3*rho_t*s_t**6*sigma**4*eta4*eta5/96 - 35*c**3*rho_t*s_t**6*sigma**3*eta4*eta5/72 + 35*c**3*rho_t*s_t**6*sigma**2*eta4*eta5/96 - 7*c**3*rho_t*s_t**6*sigma*eta4*eta5/48 + 7*c**3*rho_t*s_t**6*eta4*eta5/288, 0], [c**2*e_0*rho_t*s_t**6*sigma**6*eta0*eta5/6 - c**2*e_0*rho_t*s_t**6*sigma**5*eta0*eta5 + 5*c**2*e_0*rho_t*s_t**6*sigma**4*eta0*eta5/2 - 10*c**2*e_0*rho_t*s_t**6*sigma**3*eta0*eta5/3 + 5*c**2*e_0*rho_t*s_t**6*sigma**2*eta0*eta5/2 - c**2*e_0*rho_t*s_t**6*sigma*eta0*eta5 + c**2*e_0*rho_t*s_t**6*eta0*eta5/6 - c**2*rho_t*s_t**6*sigma**6*eta0*eta5/24 + c**2*rho_t*s_t**6*sigma**5*eta0*eta5/4 - 5*c**2*rho_t*s_t**6*sigma**4*eta0*eta5/8 + 5*c**2*rho_t*s_t**6*sigma**3*eta0*eta5/6 - 5*c**2*rho_t*s_t**6*sigma**2*eta0*eta5/8 + c**2*rho_t*s_t**6*sigma*eta0*eta5/4 - c**2*rho_t*s_t**6*eta0*eta5/24, -c**2*e_0*rho_t*s_t**7*sigma**7*eta1*eta5/7 + c**2*e_0*rho_t*s_t**7*sigma**6*eta1*eta5 - 3*c**2*e_0*rho_t*s_t**7*sigma**5*eta1*eta5 + 5*c**2*e_0*rho_t*s_t**7*sigma**4*eta1*eta5 - 5*c**2*e_0*rho_t*s_t**7*sigma**3*eta1*eta5 + 3*c**2*e_0*rho_t*s_t**7*sigma**2*eta1*eta5 - c**2*e_0*rho_t*s_t**7*sigma*eta1*eta5 + c**2*e_0*rho_t*s_t**7*eta1*eta5/7 + c**2*rho_t*s_t**7*sigma**7*eta1*eta5/28 - c**2*rho_t*s_t**7*sigma**6*eta1*eta5/4 + 3*c**2*rho_t*s_t**7*sigma**5*eta1*eta5/4 - 5*c**2*rho_t*s_t**7*sigma**4*eta1*eta5/4 + 5*c**2*rho_t*s_t**7*sigma**3*eta1*eta5/4 - 3*c**2*rho_t*s_t**7*sigma**2*eta1*eta5/4 + c**2*rho_t*s_t**7*sigma*eta1*eta5/4 - c**2*rho_t*s_t**7*eta1*eta5/28, c**2*e_0*rho_t*s_t**8*sigma**8*eta2*eta5/8 - c**2*e_0*rho_t*s_t**8*sigma**7*eta2*eta5 + 7*c**2*e_0*rho_t*s_t**8*sigma**6*eta2*eta5/2 - 7*c**2*e_0*rho_t*s_t**8*sigma**5*eta2*eta5 + 35*c**2*e_0*rho_t*s_t**8*sigma**4*eta2*eta5/4 - 7*c**2*e_0*rho_t*s_t**8*sigma**3*eta2*eta5 + 7*c**2*e_0*rho_t*s_t**8*sigma**2*eta2*eta5/2 - c**2*e_0*rho_t*s_t**8*sigma*eta2*eta5 + c**2*e_0*rho_t*s_t**8*eta2*eta5/8 - c**2*rho_t*s_t**8*sigma**8*eta2*eta5/32 + c**2*rho_t*s_t**8*sigma**7*eta2*eta5/4 - 7*c**2*rho_t*s_t**8*sigma**6*eta2*eta5/8 + 7*c**2*rho_t*s_t**8*sigma**5*eta2*eta5/4 - 35*c**2*rho_t*s_t**8*sigma**4*eta2*eta5/16 + 7*c**2*rho_t*s_t**8*sigma**3*eta2*eta5/4 - 7*c**2*rho_t*s_t**8*sigma**2*eta2*eta5/8 + c**2*rho_t*s_t**8*sigma*eta2*eta5/4 - c**2*rho_t*s_t**8*eta2*eta5/32, -c**3*e_0**2*rho_t*s_t**5*sigma**5*eta3*eta5/5 + c**3*e_0**2*rho_t*s_t**5*sigma**4*eta3*eta5 - 2*c**3*e_0**2*rho_t*s_t**5*sigma**3*eta3*eta5 + 2*c**3*e_0**2*rho_t*s_t**5*sigma**2*eta3*eta5 - c**3*e_0**2*rho_t*s_t**5*sigma*eta3*eta5 + c**3*e_0**2*rho_t*s_t**5*eta3*eta5/5 + c**3*e_0*rho_t*s_t**5*sigma**5*eta3*eta5/10 - c**3*e_0*rho_t*s_t**5*sigma**4*eta3*eta5/2 + c**3*e_0*rho_t*s_t**5*sigma**3*eta3*eta5 - c**3*e_0*rho_t*s_t**5*sigma**2*eta3*eta5 + c**3*e_0*rho_t*s_t**5*sigma*eta3*eta5/2 - c**3*e_0*rho_t*s_t**5*eta3*eta5/10 - 7*c**3*rho_t*s_t**5*sigma**5*eta3*eta5/240 + 7*c**3*rho_t*s_t**5*sigma**4*eta3*eta5/48 - 7*c**3*rho_t*s_t**5*sigma**3*eta3*eta5/24 + 7*c**3*rho_t*s_t**5*sigma**2*eta3*eta5/24 - 7*c**3*rho_t*s_t**5*sigma*eta3*eta5/48 + 7*c**3*rho_t*s_t**5*eta3*eta5/240, c**3*e_0**2*rho_t*s_t**6*sigma**6*eta4*eta5/6 - c**3*e_0**2*rho_t*s_t**6*sigma**5*eta4*eta5 + 5*c**3*e_0**2*rho_t*s_t**6*sigma**4*eta4*eta5/2 - 10*c**3*e_0**2*rho_t*s_t**6*sigma**3*eta4*eta5/3 + 5*c**3*e_0**2*rho_t*s_t**6*sigma**2*eta4*eta5/2 - c**3*e_0**2*rho_t*s_t**6*sigma*eta4*eta5 + c**3*e_0**2*rho_t*s_t**6*eta4*eta5/6 - c**3*e_0*rho_t*s_t**6*sigma**6*eta4*eta5/12 + c**3*e_0*rho_t*s_t**6*sigma**5*eta4*eta5/2 - 5*c**3*e_0*rho_t*s_t**6*sigma**4*eta4*eta5/4 + 5*c**3*e_0*rho_t*s_t**6*sigma**3*eta4*eta5/3 - 5*c**3*e_0*rho_t*s_t**6*sigma**2*eta4*eta5/4 + c**3*e_0*rho_t*s_t**6*sigma*eta4*eta5/2 - c**3*e_0*rho_t*s_t**6*eta4*eta5/12 + 7*c**3*rho_t*s_t**6*sigma**6*eta4*eta5/288 - 7*c**3*rho_t*s_t**6*sigma**5*eta4*eta5/48 + 35*c**3*rho_t*s_t**6*sigma**4*eta4*eta5/96 - 35*c**3*rho_t*s_t**6*sigma**3*eta4*eta5/72 + 35*c**3*rho_t*s_t**6*sigma**2*eta4*eta5/96 - 7*c**3*rho_t*s_t**6*sigma*eta4*eta5/48 + 7*c**3*rho_t*s_t**6*eta4*eta5/288, -c**3*e_0**2*rho_t*s_t**7*sigma**7*eta5**2/7 + c**3*e_0**2*rho_t*s_t**7*sigma**6*eta5**2 - 3*c**3*e_0**2*rho_t*s_t**7*sigma**5*eta5**2 + 5*c**3*e_0**2*rho_t*s_t**7*sigma**4*eta5**2 - 5*c**3*e_0**2*rho_t*s_t**7*sigma**3*eta5**2 + 3*c**3*e_0**2*rho_t*s_t**7*sigma**2*eta5**2 - c**3*e_0**2*rho_t*s_t**7*sigma*eta5**2 + c**3*e_0**2*rho_t*s_t**7*eta5**2/7 + c**3*e_0*rho_t*s_t**7*sigma**7*eta5**2/14 - c**3*e_0*rho_t*s_t**7*sigma**6*eta5**2/2 + 3*c**3*e_0*rho_t*s_t**7*sigma**5*eta5**2/2 - 5*c**3*e_0*rho_t*s_t**7*sigma**4*eta5**2/2 + 5*c**3*e_0*rho_t*s_t**7*sigma**3*eta5**2/2 - 3*c**3*e_0*rho_t*s_t**7*sigma**2*eta5**2/2 + c**3*e_0*rho_t*s_t**7*sigma*eta5**2/2 - c**3*e_0*rho_t*s_t**7*eta5**2/14 - c**3*rho_t*s_t**7*sigma**7*eta5**2/48 + 7*c**3*rho_t*s_t**7*sigma**6*eta5**2/48 - 7*c**3*rho_t*s_t**7*sigma**5*eta5**2/16 + 35*c**3*rho_t*s_t**7*sigma**4*eta5**2/48 - 35*c**3*rho_t*s_t**7*sigma**3*eta5**2/48 + 7*c**3*rho_t*s_t**7*sigma**2*eta5**2/16 - 7*c**3*rho_t*s_t**7*sigma*eta5**2/48 + c**3*rho_t*s_t**7*eta5**2/48, 0], [-c*delta_m*rho_t*s_t**4*sigma**4*eta0/2 + c*delta_m*rho_t*s_t**4*sigma**3*eta0 - c*delta_m*rho_t*s_t**4*sigma**2*eta0/2, c*delta_m*rho_t*s_t**5*sigma**5*eta1/2 - 3*c*delta_m*rho_t*s_t**5*sigma**4*eta1/2 + 3*c*delta_m*rho_t*s_t**5*sigma**3*eta1/2 - c*delta_m*rho_t*s_t**5*sigma**2*eta1/2, -c*delta_m*rho_t*s_t**6*sigma**6*eta2/2 + 2*c*delta_m*rho_t*s_t**6*sigma**5*eta2 - 3*c*delta_m*rho_t*s_t**6*sigma**4*eta2 + 2*c*delta_m*rho_t*s_t**6*sigma**3*eta2 - c*delta_m*rho_t*s_t**6*sigma**2*eta2/2, 0, 0, 0, c*delta_m*rho_t*s_t**3*sigma**3/3]])
	return e
def get_f():
	EI = Symbol('EI')
	s_t = Symbol('s_t')
	sigma = Symbol('sigma')
	eta0 = Symbol('eta0')
	eta2 = Symbol('eta2')
	t = Symbol('t')
	eta1 = Symbol('eta1')
	c = Symbol('c')
	delta_m = Symbol('delta_m')
	g = Symbol('g')
	rho_t = Symbol('rho_t')
	alpha_r = Symbol('alpha_r')
	GJ = Symbol('GJ')
	eta3 = Symbol('eta3')
	eta5 = Symbol('eta5')
	eta4 = Symbol('eta4')
	e_0 = Symbol('e_0')
	q2 = Function('q2')
	q1 = Function('q1')
	q0 = Function('q0')
	q5 = Function('q5')
	q4 = Function('q4')
	q3 = Function('q3')
	e = ImmutableDenseMatrix([[-8*EI*s_t**3*sigma**3*eta0*eta2*q2(t) + 24*EI*s_t**3*sigma**2*eta0*eta2*q2(t) - 24*EI*s_t**3*sigma*eta0*eta2*q2(t) + 8*EI*s_t**3*eta0*eta2*q2(t) + 6*EI*s_t**2*sigma**2*eta0*eta1*q1(t) - 12*EI*s_t**2*sigma*eta0*eta1*q1(t) + 6*EI*s_t**2*eta0*eta1*q1(t) - 4*EI*s_t*sigma*eta0**2*q0(t) + 4*EI*s_t*eta0**2*q0(t) + c*delta_m*g*rho_t*s_t**3*sigma**3*eta0*cos(alpha_r) - 2*c*delta_m*g*rho_t*s_t**3*sigma**2*eta0*cos(alpha_r) + c*delta_m*g*rho_t*s_t**3*sigma*eta0*cos(alpha_r) - c*g*rho_t*s_t**3*sigma**3*eta0*cos(alpha_r)/3 + c*g*rho_t*s_t**3*sigma**2*eta0*cos(alpha_r) - c*g*rho_t*s_t**3*sigma*eta0*cos(alpha_r) + c*g*rho_t*s_t**3*eta0*cos(alpha_r)/3], [18*EI*s_t**4*sigma**4*eta1*eta2*q2(t) - 72*EI*s_t**4*sigma**3*eta1*eta2*q2(t) + 108*EI*s_t**4*sigma**2*eta1*eta2*q2(t) - 72*EI*s_t**4*sigma*eta1*eta2*q2(t) + 18*EI*s_t**4*eta1*eta2*q2(t) - 12*EI*s_t**3*sigma**3*eta1**2*q1(t) + 36*EI*s_t**3*sigma**2*eta1**2*q1(t) - 36*EI*s_t**3*sigma*eta1**2*q1(t) + 12*EI*s_t**3*eta1**2*q1(t) + 6*EI*s_t**2*sigma**2*eta0*eta1*q0(t) - 12*EI*s_t**2*sigma*eta0*eta1*q0(t) + 6*EI*s_t**2*eta0*eta1*q0(t) - c*delta_m*g*rho_t*s_t**4*sigma**4*eta1*cos(alpha_r) + 3*c*delta_m*g*rho_t*s_t**4*sigma**3*eta1*cos(alpha_r) - 3*c*delta_m*g*rho_t*s_t**4*sigma**2*eta1*cos(alpha_r) + c*delta_m*g*rho_t*s_t**4*sigma*eta1*cos(alpha_r) + c*g*rho_t*s_t**4*sigma**4*eta1*cos(alpha_r)/4 - c*g*rho_t*s_t**4*sigma**3*eta1*cos(alpha_r) + 3*c*g*rho_t*s_t**4*sigma**2*eta1*cos(alpha_r)/2 - c*g*rho_t*s_t**4*sigma*eta1*cos(alpha_r) + c*g*rho_t*s_t**4*eta1*cos(alpha_r)/4], [-144*EI*s_t**5*sigma**5*eta2**2*q2(t)/5 + 144*EI*s_t**5*sigma**4*eta2**2*q2(t) - 288*EI*s_t**5*sigma**3*eta2**2*q2(t) + 288*EI*s_t**5*sigma**2*eta2**2*q2(t) - 144*EI*s_t**5*sigma*eta2**2*q2(t) + 144*EI*s_t**5*eta2**2*q2(t)/5 + 18*EI*s_t**4*sigma**4*eta1*eta2*q1(t) - 72*EI*s_t**4*sigma**3*eta1*eta2*q1(t) + 108*EI*s_t**4*sigma**2*eta1*eta2*q1(t) - 72*EI*s_t**4*sigma*eta1*eta2*q1(t) + 18*EI*s_t**4*eta1*eta2*q1(t) - 8*EI*s_t**3*sigma**3*eta0*eta2*q0(t) + 24*EI*s_t**3*sigma**2*eta0*eta2*q0(t) - 24*EI*s_t**3*sigma*eta0*eta2*q0(t) + 8*EI*s_t**3*eta0*eta2*q0(t) + c*delta_m*g*rho_t*s_t**5*sigma**5*eta2*cos(alpha_r) - 4*c*delta_m*g*rho_t*s_t**5*sigma**4*eta2*cos(alpha_r) + 6*c*delta_m*g*rho_t*s_t**5*sigma**3*eta2*cos(alpha_r) - 4*c*delta_m*g*rho_t*s_t**5*sigma**2*eta2*cos(alpha_r) + c*delta_m*g*rho_t*s_t**5*sigma*eta2*cos(alpha_r) - c*g*rho_t*s_t**5*sigma**5*eta2*cos(alpha_r)/5 + c*g*rho_t*s_t**5*sigma**4*eta2*cos(alpha_r) - 2*c*g*rho_t*s_t**5*sigma**3*eta2*cos(alpha_r) + 2*c*g*rho_t*s_t**5*sigma**2*eta2*cos(alpha_r) - c*g*rho_t*s_t**5*sigma*eta2*cos(alpha_r) + c*g*rho_t*s_t**5*eta2*cos(alpha_r)/5], [-GJ*s_t**3*sigma**3*eta3*eta5*q5(t) + 3*GJ*s_t**3*sigma**2*eta3*eta5*q5(t) - 3*GJ*s_t**3*sigma*eta3*eta5*q5(t) + GJ*s_t**3*eta3*eta5*q5(t) + GJ*s_t**2*sigma**2*eta3*eta4*q4(t) - 2*GJ*s_t**2*sigma*eta3*eta4*q4(t) + GJ*s_t**2*eta3*eta4*q4(t) - GJ*s_t*sigma*eta3**2*q3(t) + GJ*s_t*eta3**2*q3(t) + c**2*e_0*g*rho_t*s_t**2*sigma**2*eta3*cos(alpha_r)/2 - c**2*e_0*g*rho_t*s_t**2*sigma*eta3*cos(alpha_r) + c**2*e_0*g*rho_t*s_t**2*eta3*cos(alpha_r)/2 - c**2*g*rho_t*s_t**2*sigma**2*eta3*cos(alpha_r)/8 + c**2*g*rho_t*s_t**2*sigma*eta3*cos(alpha_r)/4 - c**2*g*rho_t*s_t**2*eta3*cos(alpha_r)/8], [3*GJ*s_t**4*sigma**4*eta4*eta5*q5(t)/2 - 6*GJ*s_t**4*sigma**3*eta4*eta5*q5(t) + 9*GJ*s_t**4*sigma**2*eta4*eta5*q5(t) - 6*GJ*s_t**4*sigma*eta4*eta5*q5(t) + 3*GJ*s_t**4*eta4*eta5*q5(t)/2 - 4*GJ*s_t**3*sigma**3*eta4**2*q4(t)/3 + 4*GJ*s_t**3*sigma**2*eta4**2*q4(t) - 4*GJ*s_t**3*sigma*eta4**2*q4(t) + 4*GJ*s_t**3*eta4**2*q4(t)/3 + GJ*s_t**2*sigma**2*eta3*eta4*q3(t) - 2*GJ*s_t**2*sigma*eta3*eta4*q3(t) + GJ*s_t**2*eta3*eta4*q3(t) - c**2*e_0*g*rho_t*s_t**3*sigma**3*eta4*cos(alpha_r)/3 + c**2*e_0*g*rho_t*s_t**3*sigma**2*eta4*cos(alpha_r) - c**2*e_0*g*rho_t*s_t**3*sigma*eta4*cos(alpha_r) + c**2*e_0*g*rho_t*s_t**3*eta4*cos(alpha_r)/3 + c**2*g*rho_t*s_t**3*sigma**3*eta4*cos(alpha_r)/12 - c**2*g*rho_t*s_t**3*sigma**2*eta4*cos(alpha_r)/4 + c**2*g*rho_t*s_t**3*sigma*eta4*cos(alpha_r)/4 - c**2*g*rho_t*s_t**3*eta4*cos(alpha_r)/12], [-9*GJ*s_t**5*sigma**5*eta5**2*q5(t)/5 + 9*GJ*s_t**5*sigma**4*eta5**2*q5(t) - 18*GJ*s_t**5*sigma**3*eta5**2*q5(t) + 18*GJ*s_t**5*sigma**2*eta5**2*q5(t) - 9*GJ*s_t**5*sigma*eta5**2*q5(t) + 9*GJ*s_t**5*eta5**2*q5(t)/5 + 3*GJ*s_t**4*sigma**4*eta4*eta5*q4(t)/2 - 6*GJ*s_t**4*sigma**3*eta4*eta5*q4(t) + 9*GJ*s_t**4*sigma**2*eta4*eta5*q4(t) - 6*GJ*s_t**4*sigma*eta4*eta5*q4(t) + 3*GJ*s_t**4*eta4*eta5*q4(t)/2 - GJ*s_t**3*sigma**3*eta3*eta5*q3(t) + 3*GJ*s_t**3*sigma**2*eta3*eta5*q3(t) - 3*GJ*s_t**3*sigma*eta3*eta5*q3(t) + GJ*s_t**3*eta3*eta5*q3(t) + c**2*e_0*g*rho_t*s_t**4*sigma**4*eta5*cos(alpha_r)/4 - c**2*e_0*g*rho_t*s_t**4*sigma**3*eta5*cos(alpha_r) + 3*c**2*e_0*g*rho_t*s_t**4*sigma**2*eta5*cos(alpha_r)/2 - c**2*e_0*g*rho_t*s_t**4*sigma*eta5*cos(alpha_r) + c**2*e_0*g*rho_t*s_t**4*eta5*cos(alpha_r)/4 - c**2*g*rho_t*s_t**4*sigma**4*eta5*cos(alpha_r)/16 + c**2*g*rho_t*s_t**4*sigma**3*eta5*cos(alpha_r)/4 - 3*c**2*g*rho_t*s_t**4*sigma**2*eta5*cos(alpha_r)/8 + c**2*g*rho_t*s_t**4*sigma*eta5*cos(alpha_r)/4 - c**2*g*rho_t*s_t**4*eta5*cos(alpha_r)/16], [-c*delta_m*g*rho_t*s_t**2*sigma**2*cos(alpha_r)/2]])
	return e
def get_T():
	e = 0
	return e
def get_U():
	e = 0
	return e
def get_Q():
	V = Symbol('V')
	a_0 = Symbol('a_0')
	alpha_r = Symbol('alpha_r')
	c = Symbol('c')
	rho = Symbol('rho')
	s_t = Symbol('s_t')
	eta0 = Symbol('eta0')
	sigma = Symbol('sigma')
	eta5 = Symbol('eta5')
	t = Symbol('t')
	eta4 = Symbol('eta4')
	eta3 = Symbol('eta3')
	Lambda = Symbol('Lambda')
	eta2 = Symbol('eta2')
	eta1 = Symbol('eta1')
	M_thetadot = Symbol('M_thetadot')
	e_0 = Symbol('e_0')
	q5 = Function('q5')
	q4 = Function('q4')
	q3 = Function('q3')
	q2 = Function('q2')
	q1 = Function('q1')
	q0 = Function('q0')
	q6 = Function('q6')
	e = ImmutableDenseMatrix([[V**2*a_0*alpha_r*c*rho*s_t**3*eta0*(1 - sigma)**3/6 + V**2*a_0*c*rho*s_t**6*eta0*eta5*(1 - sigma)**6*q5(t)/12 + V**2*a_0*c*rho*s_t**5*eta0*eta4*(1 - sigma)**5*q4(t)/10 + V**2*a_0*c*rho*s_t**4*eta0*eta3*(1 - sigma)**4*q3(t)/8 + V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**7*eta0*eta2*(1 - sigma)**7*Derivative(q2(t), t)/14 - V*a_0*c*rho*s_t**6*eta0*eta1*(1 - sigma)**6*Derivative(q1(t), t)/12 - V*a_0*c*rho*s_t**5*eta0**2*(1 - sigma)**5*Derivative(q0(t), t)/10 + (17*V*a_0*c*rho*s_t**4*sigma**2*eta0*(sigma - 1)**2/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - 17*V*a_0*c*rho*s_t**4*sigma**2*eta0*(sigma - 1)**2*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q6(t), t) + (-V*a_0*c*rho*s_t**5*sigma*eta0**2*(sigma - 1)**4/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + V*a_0*c*rho*s_t**5*sigma*eta0**2*(sigma - 1)**4*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q0(t), t) + (V*a_0*c*rho*s_t**6*sigma*eta0*eta1*(sigma - 1)**5/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**6*sigma*eta0*eta1*(sigma - 1)**5*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q1(t), t) + (-V*a_0*c*rho*s_t**7*sigma*eta0*eta2*(sigma - 1)**6/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + V*a_0*c*rho*s_t**7*sigma*eta0*eta2*(sigma - 1)**6*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q2(t), t) + (V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q6(t) + (V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q3(t) + (V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q4(t) + (V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**3*sigma*eta0*(sigma - 1)**2*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q5(t)], [V**2*a_0*alpha_r*c*rho*s_t**4*eta1*(1 - sigma)**4/8 + V**2*a_0*c*rho*s_t**7*eta1*eta5*(1 - sigma)**7*q5(t)/14 + V**2*a_0*c*rho*s_t**6*eta1*eta4*(1 - sigma)**6*q4(t)/12 + V**2*a_0*c*rho*s_t**5*eta1*eta3*(1 - sigma)**5*q3(t)/10 - V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**8*eta1*eta2*(1 - sigma)**8*Derivative(q2(t), t)/16 - V*a_0*c*rho*s_t**7*eta1**2*(1 - sigma)**7*Derivative(q1(t), t)/14 - V*a_0*c*rho*s_t**6*eta0*eta1*(1 - sigma)**6*Derivative(q0(t), t)/12 + (-17*V*a_0*c*rho*s_t**5*sigma**2*eta1*(sigma - 1)**3/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + 17*V*a_0*c*rho*s_t**5*sigma**2*eta1*(sigma - 1)**3*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q6(t), t) + (-V*a_0*c*rho*s_t**7*sigma*eta1**2*(sigma - 1)**6/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + V*a_0*c*rho*s_t**7*sigma*eta1**2*(sigma - 1)**6*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q1(t), t) + (V*a_0*c*rho*s_t**6*sigma*eta0*eta1*(sigma - 1)**5/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**6*sigma*eta0*eta1*(sigma - 1)**5*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q0(t), t) + (V*a_0*c*rho*s_t**8*sigma*eta1*eta2*(sigma - 1)**7/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**8*sigma*eta1*eta2*(sigma - 1)**7*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q2(t), t) + (-V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q6(t) + (-V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q3(t) + (-V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q4(t) + (-V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + V**2*a_0*c*rho*s_t**4*sigma*eta1*(sigma - 1)**3*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q5(t)], [V**2*a_0*alpha_r*c*rho*s_t**5*eta2*(1 - sigma)**5/10 + V**2*a_0*c*rho*s_t**8*eta2*eta5*(1 - sigma)**8*q5(t)/16 + V**2*a_0*c*rho*s_t**7*eta2*eta4*(1 - sigma)**7*q4(t)/14 + V**2*a_0*c*rho*s_t**6*eta2*eta3*(1 - sigma)**6*q3(t)/12 + V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**9*eta2**2*(1 - sigma)**9*Derivative(q2(t), t)/18 - V*a_0*c*rho*s_t**8*eta1*eta2*(1 - sigma)**8*Derivative(q1(t), t)/16 - V*a_0*c*rho*s_t**7*eta0*eta2*(1 - sigma)**7*Derivative(q0(t), t)/14 + (17*V*a_0*c*rho*s_t**6*sigma**2*eta2*(sigma - 1)**4/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - 17*V*a_0*c*rho*s_t**6*sigma**2*eta2*(sigma - 1)**4*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q6(t), t) + (-V*a_0*c*rho*s_t**9*sigma*eta2**2*(sigma - 1)**8/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + V*a_0*c*rho*s_t**9*sigma*eta2**2*(sigma - 1)**8*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q2(t), t) + (-V*a_0*c*rho*s_t**7*sigma*eta0*eta2*(sigma - 1)**6/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + V*a_0*c*rho*s_t**7*sigma*eta0*eta2*(sigma - 1)**6*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q0(t), t) + (V*a_0*c*rho*s_t**8*sigma*eta1*eta2*(sigma - 1)**7/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - V*a_0*c*rho*s_t**8*sigma*eta1*eta2*(sigma - 1)**7*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q1(t), t) + (V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q6(t) + (V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q3(t) + (V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q4(t) + (V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) - V**2*a_0*c*rho*s_t**5*sigma*eta2*(sigma - 1)**4*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(4*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q5(t)], [M_thetadot*V*c**3*rho*s_t**5*eta3*eta5*(1 - sigma)**5*Derivative(q5(t), t)/40 + M_thetadot*V*c**3*rho*s_t**4*eta3*eta4*(1 - sigma)**4*Derivative(q4(t), t)/32 + M_thetadot*V*c**3*rho*s_t**3*eta3**2*(1 - sigma)**3*Derivative(q3(t), t)/24 + V**2*a_0*alpha_r*c**2*e_0*rho*s_t**2*eta3*(1 - sigma)**2/4 + V**2*a_0*c**2*e_0*rho*s_t**5*eta3*eta5*(1 - sigma)**5*q5(t)/10 + V**2*a_0*c**2*e_0*rho*s_t**4*eta3*eta4*(1 - sigma)**4*q4(t)/8 + V**2*a_0*c**2*e_0*rho*s_t**3*eta3**2*(1 - sigma)**3*q3(t)/6 - V*a_0*c**2*e_0*rho*s_t**6*eta2*eta3*(1 - sigma)**6*Derivative(q2(t), t)/12 - V*a_0*c**2*e_0*rho*s_t**5*eta1*eta3*(1 - sigma)**5*Derivative(q1(t), t)/10 - V*a_0*c**2*e_0*rho*s_t**4*eta0*eta3*(1 - sigma)**4*Derivative(q0(t), t)/8], [M_thetadot*V*c**3*rho*s_t**6*eta4*eta5*(1 - sigma)**6*Derivative(q5(t), t)/48 + M_thetadot*V*c**3*rho*s_t**5*eta4**2*(1 - sigma)**5*Derivative(q4(t), t)/40 + M_thetadot*V*c**3*rho*s_t**4*eta3*eta4*(1 - sigma)**4*Derivative(q3(t), t)/32 + V**2*a_0*alpha_r*c**2*e_0*rho*s_t**3*eta4*(1 - sigma)**3/6 + V**2*a_0*c**2*e_0*rho*s_t**6*eta4*eta5*(1 - sigma)**6*q5(t)/12 + V**2*a_0*c**2*e_0*rho*s_t**5*eta4**2*(1 - sigma)**5*q4(t)/10 + V**2*a_0*c**2*e_0*rho*s_t**4*eta3*eta4*(1 - sigma)**4*q3(t)/8 - V*a_0*c**2*e_0*rho*s_t**7*eta2*eta4*(1 - sigma)**7*Derivative(q2(t), t)/14 - V*a_0*c**2*e_0*rho*s_t**6*eta1*eta4*(1 - sigma)**6*Derivative(q1(t), t)/12 - V*a_0*c**2*e_0*rho*s_t**5*eta0*eta4*(1 - sigma)**5*Derivative(q0(t), t)/10], [M_thetadot*V*c**3*rho*s_t**7*eta5**2*(1 - sigma)**7*Derivative(q5(t), t)/56 + M_thetadot*V*c**3*rho*s_t**6*eta4*eta5*(1 - sigma)**6*Derivative(q4(t), t)/48 + M_thetadot*V*c**3*rho*s_t**5*eta3*eta5*(1 - sigma)**5*Derivative(q3(t), t)/40 + V**2*a_0*alpha_r*c**2*e_0*rho*s_t**4*eta5*(1 - sigma)**4/8 + V**2*a_0*c**2*e_0*rho*s_t**7*eta5**2*(1 - sigma)**7*q5(t)/14 + V**2*a_0*c**2*e_0*rho*s_t**6*eta4*eta5*(1 - sigma)**6*q4(t)/12 + V**2*a_0*c**2*e_0*rho*s_t**5*eta3*eta5*(1 - sigma)**5*q3(t)/10 - V*a_0*c**2*e_0*rho*s_t**8*eta2*eta5*(1 - sigma)**8*Derivative(q2(t), t)/16 - V*a_0*c**2*e_0*rho*s_t**7*eta1*eta5*(1 - sigma)**7*Derivative(q1(t), t)/14 - V*a_0*c**2*e_0*rho*s_t**6*eta0*eta5*(1 - sigma)**6*Derivative(q0(t), t)/12], [-17*V**2*a_0*c*rho*s_t**2*sigma**2*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + (-17*V*a_0*c*rho*s_t**3*sigma**3/(400*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + 17*V*a_0*c*rho*s_t**3*sigma**3*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(400*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q6(t), t) + (-17*V**2*a_0*c*rho*s_t**2*sigma**2*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + 17*V**2*a_0*c*rho*s_t**2*sigma**2*(sin(Lambda)/(sin(Lambda)**2 + cos(Lambda)**2) + sin(Lambda)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q6(t) + (-17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + 17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t*eta3*(1 - sigma)*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t*eta3*(1 - sigma)/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q3(t) + (-17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + 17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t**2*eta4*(1 - sigma)**2*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**2*eta4*(1 - sigma)**2/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q4(t) + (-17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)) + 17*V**2*a_0*c*rho*s_t**2*sigma**2*(s_t**3*eta5*(1 - sigma)**3*sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)**2) + s_t**3*eta5*(1 - sigma)**3/(sin(Lambda)**2 + cos(Lambda)**2))*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))**Rational(3, 2)*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*q5(t) + (17*V*a_0*c*rho*s_t**4*sigma**2*eta0*(sigma - 1)**2/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - 17*V*a_0*c*rho*s_t**4*sigma**2*eta0*(sigma - 1)**2*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q0(t), t) + (-17*V*a_0*c*rho*s_t**5*sigma**2*eta1*(sigma - 1)**3/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) + 17*V*a_0*c*rho*s_t**5*sigma**2*eta1*(sigma - 1)**3*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q1(t), t) + (17*V*a_0*c*rho*s_t**6*sigma**2*eta2*(sigma - 1)**4/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))) - 17*V*a_0*c*rho*s_t**6*sigma**2*eta2*(sigma - 1)**4*sin(alpha_r)*atan(sin(alpha_r)/((sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))/(200*sqrt(1 + sin(alpha_r)**2/((sin(Lambda)**2 + cos(Lambda)**2)**2*cos(alpha_r)**2))*(sin(Lambda)**2 + cos(Lambda)**2)*cos(alpha_r)))*Derivative(q2(t), t)]])
	return e
